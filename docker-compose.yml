version: '3.8'

services:
  api:
    container_name: finshark_api
    restart: unless-stopped
    build:
      context: ./server # Path to the Dockerfile
      dockerfile: Dockerfile
      target: final
    environment:
      ConnectionStrings__DefaultConnection: Host=db;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Trust Server Certificate=true; Pooling=true; MinPoolSize=0; MaxPoolSize=100; Timeout=15; CommandTimeout=30
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ASPNETCORE_URLS: http://*:${API_PORT}
    ports:
      - '${API_PORT}:${API_PORT}'
    depends_on:
      - db
      - migrations

  migrations:
    container_name: finshark_db_migrations
    restart: 'no'
    build:
      context: ./server # Path to the Dockerfile
      dockerfile: Dockerfile
      target: migrations
    environment:
      ConnectionStrings__DefaultConnection: Host=db;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Trust Server Certificate=true; Pooling=true; MinPoolSize=0; MaxPoolSize=100; Timeout=15; CommandTimeout=30
    command: ['dotnet', 'ef', 'database', 'update']
    depends_on:
      - db

  adminer:
    container_name: finshark_adminer
    image: adminer:latest
    restart: unless-stopped
    ports:
      - '${ADMINER_PORT}:8080'

  db:
    container_name: finshark_db
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    # ports:
    #   - '5432:5432'

volumes:
  postgres-data:

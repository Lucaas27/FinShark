version: '3.8'

services:
  api:
    container_name: finshark_api
    build:
      context: ./server # Path to the Dockerfile
      dockerfile: Dockerfile
      target: final
    restart: unless-stopped
    environment:
      ConnectionStrings__DefaultConnection: Host=db;Port=5432;Database=finshark;Username=postgres;Password=postgres;Trust Server Certificate=true; Pooling=true; MinPoolSize=0; MaxPoolSize=100; Timeout=15; CommandTimeout=30;
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://+:7286
    ports:
      - '7286:7286'
    depends_on:
      - db
      - migrations

  migrations:
    container_name: finshark_db_migrations
    build:
      context: ./server # Path to the Dockerfile
      dockerfile: Dockerfile
      target: migrations
    environment:
      ConnectionStrings__DefaultConnection: Host=db;Port=5432;Database=finshark;Username=postgres;Password=postgres;Trust Server Certificate=true; Pooling=true; MinPoolSize=0; MaxPoolSize=100; Timeout=15; CommandTimeout=30;
    command: ['dotnet', 'ef', 'database', 'update']
    depends_on:
      - db

  adminer:
    container_name: finshark_adminer
    image: adminer:latest
    restart: unless-stopped
    ports:
      - '9090:8080'

  db:
    container_name: finshark_db
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: finshark
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - '5432:5432'

volumes:
  postgres-data:
